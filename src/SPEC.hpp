#ifndef __SPEC__H__
#define __SPEC__H__

#include <unordered_map>
#include <string>
#include <tuple>

namespace GDSTXT {
namespace SPEC {

static const std::unordered_map<unsigned char, std::tuple<std::string, unsigned char>> 
tagname_map {
  {0x00, {"HEADER", 0x02}},
  {0x01, {"BGNLIB", 0x02}},
  {0x02, {"LIBNAME", 0x06}},
  {0x03, {"UNITS", 0x05}},
  {0x04, {"ENDLIB", 0x00}},
  {0x05, {"BGNSTR", 0x02}},
  {0x06, {"STRNAME", 0x06}},
  {0x07, {"ENDSTR", 0x00}},
  {0x08, {"BOUNDARY", 0x00}},
  {0x09, {"PATH", 0x00}},
  {0x0a, {"SREF", 0x00}},
  {0x0b, {"AREF", 0x00}},
  {0x0c, {"TEXT", 0x00}},
  {0x0d, {"LAYER", 0x02}},
  {0x0e, {"DATATYPE", 0x02}},
  {0x0f, {"WIDTH", 0x03}},
  {0x10, {"XY", 0x03}},
  {0x11, {"ENDEL", 0x00}},
  {0x12, {"SNAME", 0x06}},
  {0x13, {"CLOROW", 0x02}},
  {0x14, {"TEXTNODE", 0x00}},
  {0x15, {"NODE", 0x00}},
  {0x16, {"TEXTTYPE", 0x02}},
  {0x17, {"PRESENTATION", 0x01}},
  {0x18, {"SPACING", 0xff}},
  {0x19, {"STRING", 0x06}},
  {0x1a, {"STRANS", 0x01}},
  {0x1b, {"MAG", 0x05}},
  {0x1c, {"ANGLE", 0x05}},
  {0x1d, {"UINTEGER", 0xff}},
  {0x1e, {"USTRING", 0xff}},
  {0x1f, {"REFLIBS", 0x06}},
  {0x20, {"FONTS", 0x06}},
  {0x21, {"PATHTYPE", 0x02}},
  {0x22, {"GENERATIONS", 0x02}},
  {0x23, {"ATTRTABLE", 0x06}},
  {0x24, {"STYPTABLE", 0x06}},
  {0x25, {"STRTYPE", 0x02}},
  {0x26, {"ELFLAGS", 0x01}},
  {0x27, {"ELKEY", 0x03}},
  {0x28, {"LINKTYPE", 0xff}},
  {0x29, {"LINKKEYS", 0xff}},
  {0x2a, {"NODETYPE", 0x02}},
  {0x2b, {"PROPATTR", 0x02}},
  {0x2c, {"PROPVALUE", 0x06}},
  {0x2d, {"BOX", 0x00}},
  {0x2e, {"BOXTYPE", 0x02}},
  {0x2f, {"PLEX", 0x03}},
  {0x30, {"BGNEXTN", 0x03}},
  {0x31, {"ENDTEXTN", 0x04}},
  {0x32, {"TAPENUM", 0x02}},
  {0x33, {"TAPECODE", 0x02}},
  {0x34, {"STRCLASS", 0x01}},
  {0x35, {"RESERVED", 0x03}},
  {0x36, {"FORMAT", 0x02}},
  {0x37, {"MASK", 0x06}},
  {0x38, {"ENDMASKS", 0x00}},
  {0x39, {"LIBDIRSIZE", 0x02}},
  {0x3a, {"SRFNAME", 0x06}},
  {0x3b, {"LIBSECUR", 0x02}},
  {0x3c, {"UNKNOW", 0xff}},
};

enum class TagDataType {
  NODATA    = 0x00,
  BITARRAY  = 0x01,
  INTEGER_2 = 0x02,
  INTEGER_4 = 0x03,
  REAL_4    = 0x04,
  REAL_8    = 0x05,
  ASCII     = 0x06,
  BAD       = 0xff,
};

}
}

#endif //__SPEC__H__